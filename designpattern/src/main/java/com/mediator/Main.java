package com.mediator;

/**
 * 仲裁者，中介者模式(Mediator Pattern)定义：用一个中介对象来封装一系列的对象交互，
 * 中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变
 * 它们之间的交互。中介者模式又称为调停者模式，它是一种对象行为型模式。
 *
 * 中介者承担两方面的职责：
 中转作用（结构性）：
 通过中介者提供的中转作用，各个同事对象就不再需要显式引用其他同事，当需要和其他
 同事进行通信时，通过中介者即可。该中转作用属于中介者在结构上的支持。
 协调作用（行为性）：
 中介者可以更进一步的对同事之间的关系进行封装，同事可以一致地和中介者进行交互，
 而不需要指明中介者需要具体怎么做，中介者根据封装在自身内部的协调逻辑，对同事的
 请求进行进一步处理，将同事成员之间的关系行为进行分离和封装。该协调作用属于中介者在行为上的支持。

 使用场景：
 1，系统中对象之间存在复杂的引用关系，产生的相互依赖关系结构混乱且难以理解。
 2，一个对象由于引用了其他很多对象并且直接和这些对象通信，导致难以复用该对象。
 3，想通过一个中间类来封装多个类中的行为，而又不想生成太多的子类。可以通过引入中介者类来实现，在中介者中定义对象。
 4，交互的公共行为，如果需要改变行为则可以增加新的中介者类。
 应用：
 Controller 作为一种中介者，它负责控制视图对象View和模型对象Model之间的交互。如在Struts中，Action就可以作为JSP页面与业务对象之间的中介者。


 */
public class Main {
    static public void main(String args[]) {
        new LoginFrame("Mediator Sample");
    }
}
